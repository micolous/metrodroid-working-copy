allprojects {
    repositories {
        google()
        jcenter()
        maven { url "https://kotlin.bintray.com/kotlinx" }
    }
}

buildscript {
    repositories {
        google()
        jcenter()
    }

    dependencies {
        classpath "com.google.protobuf:protobuf-gradle-plugin:$protobuf_gradle_version"
    }
}

apply plugin: 'java-library'
apply plugin: 'com.google.protobuf'
apply plugin: 'objective-c'
apply plugin: 'c'

compileJava {
     sourceCompatibility = JavaVersion.VERSION_1_8
     targetCompatibility = JavaVersion.VERSION_1_8
}

dependencies {
    implementation "com.google.protobuf:protobuf-javalite:$protobuf_version"
}

protobuf {
    protoc {
        // You still need protoc like in the non-Android case
        artifact = "com.google.protobuf:protoc:$protobuf_version"
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {
                    option "lite"
                }
            }
            task.plugins {
                objc {}
                c {}
            }
        }
    }
}

final def iOSTarget = System.getenv('SDK_NAME')?.startsWith("iphoneos") \
                              ? "ios_arm64" : "ios_x86_64"

final def protobufCFlags = "pkg-config libprotobuf-c --cflags".execute().text.trim().split()
final def protobufLibs = "pkg-config libprotobuf-c --libs".execute().text.trim().split()

model {
    toolChains {
        clang(Clang) {
            target("ios_arm64") {
                objcCompiler.withArguments { args ->
                    args << '-fembed-bitcode'
                    args << '-arch'
                    args << 'arm64'
                }
            }
            target("ios_x86_64") {
                objcCompiler.withArguments { args ->
                    args << '-fembed-bitcode'
                    args << '-arch'
                    args << 'x86_64'
                    args << '-m64'
                }
            }
        }
    }
    platforms {
        ios_arm64 {
            architecture "arm64"
        }
        ios_x86_64 {
            architecture "x86_64"
        }
    }
    components {
        main(NativeLibrarySpec) {
            targetPlatform iOSTarget
            sources {
                objc {
                    source {
                        srcDirs new File(buildDir, 'generated/source/proto/main/objc'), new File (rootProject.projectDir, '/third_party/protobuf/objectivec')
                        include "GPBProtocolBuffers.m", "Stations.pbobjc.m"
                    }
                    exportedHeaders {
                        srcDirs new File(buildDir, 'generated/source/proto/main/objc'), new File (rootProject.projectDir, '/third_party/protobuf/objectivec')
                    }
                }
            }
        }
        metroProtoC(NativeLibrarySpec) {
            sources {
                c {
                    source {
                        srcDirs new File(buildDir, 'generated/source/proto/main/c')
                        include 'stations.pb-c.c'
                    }
                    exportedHeaders {
                        srcDirs new File(buildDir, 'generated/source/proto/main/c')
                        include 'stations.pb-c.h'
                    }
                }
            }
        }
    }
    binaries {
        withType(SharedLibraryBinarySpec) {
            if (targetPlatform.name.startsWith('ios')) {
                objcCompiler.args '-fno-objc-arc'
                linker.args '-fno-objc-arc', '-framework', 'CoreServices', '-framework', 'Foundation'
            } else {
                cCompiler.args.addAll(protobufCFlags)
                linker.args.addAll(protobufLibs)
            }
        }
        withType(StaticLibraryBinarySpec) {
            if (targetPlatform.name.startsWith('ios')) {
                objcCompiler.args '-fno-objc-arc'
                linker.args '-fno-objc-arc', '-framework', 'CoreServices', '-framework', 'Foundation'
            } else {
                cCompiler.args.addAll(protobufCFlags)
                linker.args.addAll(protobufLibs)
            }
        }
    }
}

repositories {
    mavenCentral()
}

// workaround for https://youtrack.jetbrains.com/issue/KT-27170
configurations {
    compileClasspath
}
